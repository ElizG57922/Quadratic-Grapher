package grapher;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.Timer;


/**
 *
 * @author elizg
 */
public class Grapher extends JFrame {
	
	private GraphicPanel gp;
	private ControlPanel cp;
	
//	private double real = -0.16, imag = 1.0405, radius = 0.026;
	private double real = 0.0, imag = 0.0, radius = 2.5;

	public double getReal()
	{
		return real;
	}
	
	public double getImag()
	{
		return imag;
	}
	
	public double getRadius()
	{
		return radius;
	}
	
	GraphicPanel getGraphicPanel()
	{
		return gp;
	}
	
	public Grapher (int height, int width)
	{

		// -- set frame title
		setTitle("Graph");
				
		// -- size of the frame: width, height
		setSize(width, height);
		
		// -- center the frame on the screen
		setLocationRelativeTo(null);
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// -- set the layout manager and add items
		//    5, 5 is the border around the edges of the areas
		setLayout(new BorderLayout(5, 5));

		gp = new GraphicPanel();
		this.add(gp, BorderLayout.CENTER);
		
		cp = new ControlPanel();
		this.add(cp, BorderLayout.EAST);
		
		// -- show the frame on the screen
		this.setVisible(true);
		
	}
	

	public class GraphicPanel extends JPanel {

		// -- to generate events based on a clock tick
		private Timer animationTimer = null;	
		
		public Timer getAnimationTimer()
		{
			return animationTimer;
		}

		public GraphicPanel ()
		{

			// -- construct the extended object
			super();			

			this.setBackground(Color.gray);
		}
		
		public Dimension getPreferredSize() 
		{
			return new Dimension(50, 50);
		}
		

		public void paint(Graphics g)
		{
			super.paintComponent(g);
			
			Graphics2D g2d = (Graphics2D)g;
			int h = this.getHeight();
			int w = this.getWidth();
                        int prevX = (int)linearInterpolate(cp.getXMin(), cp.getXMin(), cp.getXMax(), 0, w);
                        int prevY = h - (int)linearInterpolate(cp.getYMin(), cp.getYMin(), cp.getYMax(), 0, h);
                        for(double i = cp.getXMin() + (cp.getXMax()-cp.getXMin())/20; i <= cp.getXMax(); i += (cp.getXMax()-cp.getXMin())/20){
                            int x = (int)linearInterpolate(i, cp.getXMin(), cp.getXMax(), 0, w);
                            int y = h - (int)linearInterpolate(calculateY(i), cp.getYMin(), cp.getYMax(), 0, h);
                            g2d.drawLine(prevX, prevY, x, y);
                            prevX = x;
                            prevY = y;
                        }
		}
            public double linearInterpolate(double x, double x0, double x1, double y0, double y1){
	        if(x0 > x1){
                    double temp = x1;
                    x1 = x0;
                    x0 = temp;
                }
                if(y0 > y1){
                    double temp = y1;
                    y1 = y0;
                    y0 = temp;
                }
                return ((y1 - y0) / (x1 - x0)) * (x - x0) + y0;
	    }
            
            public double calculateY(double x){
                double y = 0.0;
                if(cp.getA() != 0)
                    y += cp.getA() * x * x;
                if(cp.getB() != 0)
                    y += cp.getB() * x;
                if(cp.getC() != 0)
                    y += cp.getC();
                return y;
            }
	}
	
	// -- Inner class for control panel, also inherits from JPanel
	public class ControlPanel extends JPanel {

		private JTextField xMin;
                private JTextField xMax;
                private JTextField yMin;
                private JTextField yMax;
                private JTextField a;
                private JTextField b;
                private JTextField c;
                private JTextField roots;
                
		
		public double getXMin()
		{
		    return Double.valueOf(xMin.getText());
		}
		public double getXMax()
		{
	            return Double.valueOf(xMax.getText());
		}
                public double getYMin()
		{
		    return Double.valueOf(yMin.getText());
		}
                public double getYMax()
		{
		    return Double.valueOf(yMax.getText());
		}
                public double getA(){
                    return Double.valueOf(a.getText());
                }
                public double getB(){
                    return Double.valueOf(b.getText());
                }
                public double getC(){
                    return Double.valueOf(c.getText());
                }
		public ControlPanel () {
			// -- GridLayout manager
			setLayout(new GridLayout(20, 1, 2, 2));
			
			JButton computeButton = new JButton("Compute");
			computeButton.addActionListener(
			    new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
				    calculateRoots();
                                    gp.repaint();
				}
			    }
			);
                        
			xMin = new JTextField("0");
			xMax = new JTextField("5");
                        yMin = new JTextField("0");
			yMax = new JTextField("5");
                        a = new JTextField("0");
			b = new JTextField("1");
			c = new JTextField("0");
                        roots = new JTextField(" ");
                        roots.setEditable(false);
                        
                        // -- add all controls
                        add(new JLabel("X Min"));
			add(xMin);
                        add(new JLabel("X Max"));
			add(xMax);
                        add(new JLabel("Y Min"));
                        add(yMin);
                        add(new JLabel("Y Max"));
			add(yMax);
                        add(new JLabel("A"));
                        add(a);
                        add(new JLabel("B"));
                        add(b);
                        add(new JLabel("C"));
                        add(c);
                        add(computeButton);
                        add(new JLabel("Roots"));
                        add(roots);
			
		}
                public void calculateRoots(){
  		    double a = getA();
		    double b = getB();
		    double c = getC();
		    double discriminant, solution1, solution2;
		
		    if ((Math.abs(a) < 0.001) && (Math.abs(b) < 0.001)) {
			roots.setText("No solution");
		    }
		    else if ((Math.abs(a) < 0.001)) {
			solution1 = (-c) / b;
			roots.setText("Linear: " + solution1);
		    }
		    else {
    			discriminant = (Math.pow(b, 2)) - (4 * a * c);

	    	        if (discriminant > 0.0) {
    	        	            solution1 = ((-b) + Math.sqrt(discriminant)) / (2 * a);
	    	       	    solution2 = ((-b) - Math.sqrt(discriminant)) / (2 * a);
 	           	    roots.setText("2 real roots: " + solution1 + ", " + solution2);
    	       	        }
            	        else if (Math.abs(discriminant) < 0.001) {
		            solution1 = (-b) / (2 * a);
    	                    roots.setText("1 real root: " + solution1);
	    	        }
              	        else {
            		    roots.setText("2 complex roots: "
           			+ ((-b) / (2 * a)) + " + " + (Math.abs((Math.sqrt(-discriminant)) / (2 * a))) + "i, "
           			+ ((-b) / (2 * a)) + " - " + (Math.abs((Math.sqrt(-discriminant)) / (2 * a)) + "i"));
           		}
		    }
                }
		
		public Dimension getPreferredSize() 
		{
			return new Dimension(200, 500);
		}

	}

    public static void main(String[] args) {
        new Grapher(356, 500);
    }
    
}
